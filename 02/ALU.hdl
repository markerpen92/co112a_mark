// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

//reference : https://github.com/AaronRandall/nand2tetris/blob/master/projects/02/ALU.hdl

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
        Clone(a=false , out=false16);
        Mux16(a=x , b=false16 , sel=zx , out=zeroX);
        Mux16(a=y , b=false16 , sel=zy , out=zeroY);

        Not16(in=zeroX , out=FnotX);
        Mux16(a=zeroX , b=FnotX , sel=nx , out=notX);

        Not16(in=zeroY , out=FnotY);
        Mux16(a=zeroY , b=FnotY , sel=ny , out=notY);

        Add16(a=notX , b=notY , out=FaddXY);
        And16(a=notX , b=notY , out=FandXY);
        Mux16(a=FandXY , b=FaddXY , sel=f , out=AndAddXY);

        Not16(in=AndAddXY , out=notFAndAddXY);
        Mux16(a=AndAddXY , b=notFAndAddXY , sel=no , out=out , out[0..7]=lowOut , out[8..15]=highOut , out[15]=ng);

        Or8Way(in=lowOut , out=zrtmp1);
        Or8Way(in=highOut , out=zrtmp2);
        Or(a=zrtmp1 , b=zrtmp2 , out=zrtmp3);
        Not(in=zrtmp3 , out=zr);
}
